* PluginBase
** The shared data interface
   Data created by a plugin can be shared with the main program "H4Reco" of with 
   other plugins. In order to share a data one should register the data inside the 
   plugin using the =RegisterSharedData= method. A shared data consist of:
   - A pointer to the actual object. The pointer points to an object of type =TObject=,
     so the registered data must inherit from it.
   - A "tag" that identifies the data. Note that a suffix is automatically attached to the specified tag.
     This suffix has the form of "InstanceName_" where the instance name is the unique plugin name
     specified in the =h4reco.pluginSequence= option.
   - A bool that discriminate between "permanent" and "volatile" data. The former refer to object that
     are going to be stored in the output file (so they must implement a =Write()= method), while the latter
     refers to data the are not going to be store permanently in the output but are just shared during the
     processing (between plugins for instance).
   - *Note:* If a permanent object is also a TTree it will be added as friend to the main "h4" tree.
   A Plugin can retrieve data shared by another plugin by calling the =OtherPlugin->GetSharedData(...)= method.
   The method returns a vector of shared data object matching the requirements specified in the method call.
   The "OtherPlugin" pointers are available as arguments of the =ProcessEvent(...)= method.


* DigitizerReco plugin:
** Configuration
   - =channelsNames= defines which channel are analyzed by the plugin.
     Channel options are specified separately.
   - The waveform tree is stored optionally and with a configurable prescale.
** Reco information
   *All variables are computed after the original baseline is subtracted (event by event)* 
*** baseline:
    + *b_charge*: sum of WF samples in a fixed (taken from cfg) window.
    + *b_slope*: a pol1 =b_slope*x + K= is fit to the baseline.
    + *b_rms*: RMS of the sample inside the baseline window.
*** amplitude:
    + *maximum*: max sample value.
    + *amp_max*: interpolated amp max (pol2 fit, number of sample used is specified in the cfg).
    + *fit_ampl*: amplitude extracted from a template fit.
*** charge:
    + *charge_sig*: sum of WF samples inside a window defined in the cfg
    + *charge_tot*: sum of |WF samples| over the whole digitizer window.
*** time:
    + *time_maximum*: bare time of max sample
    + *time*: for normal WF is the time computed with a CFD method, in the process =amp_max= is used as 
      amplitude information. For *NINO* this variables is computed with a leading edge method
      (threshold set in the cfg, roughly ~40% of amp_max).
    + *time_chi2*: chi2/ndf of the linear interpolation used to reconstruct the time (both CFD and LED).
    + *time_max*: time estimated from pol2 interpolation.
    + *chi2_max*: chi2 of the pol2 interpolation.
    + *fit_time*: time extracted from the template fit.
    + *fit_chi2*: chi2/ndf of the template fit.
*** hodo:
    + *hodoX, hodoY*: 4 branches (2 in X, 2 in Y).
*** others:
    + spill, event, run, start_time: copied from the raw tree.
    + for each channel a name is specified in the cfg file, a branch with this name is created for each
      of the channels. Each branch hold the index corresponding to the channel inside the tree, so for 
      example in order to plot the amplitude of the reference MCP one should do:
      =reco_tree->Draw("amp_max[MCP1]")=

* SpikeTagger plugin:
** Configuration
   - =srcInstanceName= source plugin.
   - =channelsNames= defines which channel are analyzed by the plugin.
   - =undershootFinderWindow= defines the number of samples after the maximum in which the minimum is searched for.
   - The waveform tree (spikes_wf tree) in a configurable window (=storeNSampleBeforeMax=, =storeNSampleAfterMax=) around the maximum sample is stored optionally and with a configurable prescale.
** spikes tree variables
    + *undershoot*: Minimum sample in an =undershootFinderWindow= sized sample window after the maximum sample.
    + *amp_sum_matrix*: Sum over all active channels.
    + *n_swiss_cross_neighbours*: Number of neighbouring channels contributing to the swiss cross variable.
    + *swiss_cross*: 1 - sum of available swiss cross channels (channels up, down, left, and right of the current channel) / maximum.
    + *n_channels_3by3*: Number of neighbouring channels contributing to the 3 by 3 channel sum.
    + *amp_sum_3by3*: 3 by 3 channel sum (active channels only).
    + *n_samples_above_75perc_max*: Number of samples with the sample value above 75% of the maximum.
    + *n_samples_above_50perc_max*: Number of samples with the sample value above 50% of the maximum.
    + *n_samples_above_25perc_max*: Number of samples with the sample value above 25% of the maximum.
    + *tot_75perc_max*: Time over a threshold of 75% of the maximum.
    + *tot_50perc_max*: Time over a threshold of 50% of the maximum.
    + *tot_25perc_max*: Time over a threshold of 25% of the maximum.
    + *sample_max_minus3_over_sample_max*: Sample at t_maximum-3 / sample at t_maximum.
    + *sample_max_minus2_over_sample_max*: Sample at t_maximum-2 / sample at t_maximum.
    + *sample_max_minus1_over_sample_max*: Sample at t_maximum-1 / sample at t_maximum.
    + *sample_max_plus1_over_sample_max*: Sample at t_maximum+1 / sample at t_maximum.
    + *sample_max_plus2_over_sample_max*: Sample at t_maximum+2 / sample at t_maximum.
    + *sample_max_plus3_over_sample_max*: Sample at t_maximum+3 / sample at t_maximum.
    + *t_undershoot_minus_t_sample_max*: Time between the maximum and the undershoot sample.
    + *t_3sigma_noise_minus_t_sample_max*: Time between the maximum and the last sample above three times the noise level defined by the baseline RMS. 
